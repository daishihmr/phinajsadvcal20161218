{"version":3,"sources":["Camera.js","GLLayer.js","GLSprite.js","main.js","MainScene.js","SpriteDrawer.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClfile":"all.js","sourcesContent":["phina.namespace(function() {\r\n\r\n  phina.define(\"Camera\", {\r\n\r\n    position: null,\r\n    vMatrix: null,\r\n    pMatrix: null,\r\n    vpMatrix: null,\r\n\r\n    init: function() {\r\n      this.position = vec3.create();\r\n      this.vMatrix = mat4.create();\r\n      this.pMatrix = mat4.create();\r\n      this.vpMatrix = mat4.create();\r\n    },\r\n\r\n    setPosition: function(x, y, z) {\r\n      vec3.set(this.position, x, y, z);\r\n      return this;\r\n    },\r\n\r\n    lookAt: function(x, y, z) {\r\n      mat4.lookAt(this.vMatrix, this.position, [x, y, z], [0, 1, 0]);\r\n      return this;\r\n    },\r\n\r\n    ortho: function(left, right, bottom, top, near, far) {\r\n      mat4.ortho(this.pMatrix, left, right, bottom, top, near, far);\r\n      return this;\r\n    },\r\n\r\n    perspective: function(fovy, aspect, near, far) {\r\n      mat4.perspective(this.pMatrix, fovy, aspect, near, far);\r\n      return this;\r\n    },\r\n\r\n    calcVpMatrix: function() {\r\n      mat4.mul(this.vpMatrix, this.pMatrix, this.vMatrix);\r\n      return this;\r\n    },\r\n\r\n    uniformValues: function() {\r\n      return {\r\n        vpMatrix: this.vpMatrix,\r\n        cameraPosition: this.position,\r\n      };\r\n    }\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"GLLayer\", {\r\n    superClass: \"Layer\",\r\n\r\n    renderChildBySelf: true,\r\n\r\n    domElement: null,\r\n    gl: null,\r\n    quality: 1.0,\r\n\r\n    camera: null,\r\n\r\n    spriteDrawer: null,\r\n\r\n    zoomBlurCenterX: 0,\r\n    zoomBlurCenterY: 0,\r\n    zoomBlurStrength: 0,\r\n    zoomBlurAlpha: 0,\r\n    reverse: false,\r\n    grayscale: false,\r\n    water: false,\r\n    mosaic: false,\r\n\r\n    init: function() {\r\n      this.superInit();\r\n      this.originX = 0;\r\n      this.originY = 0;\r\n\r\n      var canvas = document.createElement(\"canvas\");\r\n      var gl = this.gl = canvas.getContext(\"webgl\");\r\n      var extInstancedArrays = phigl.Extensions.getInstancedArrays(gl);\r\n\r\n      this.domElement = canvas;\r\n      this.domElement.width = this.width * this.quality;\r\n      this.domElement.height = this.height * this.quality;\r\n\r\n      gl.viewport(0, 0, this.domElement.width, this.domElement.height);\r\n      gl.clearColor(0, 0, 0, 0);\r\n      gl.disable(gl.CULL_FACE);\r\n      gl.enable(gl.BLEND);\r\n      gl.disable(gl.DEPTH_TEST);\r\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n      var w = this.width;\r\n      var h = this.height;\r\n      var dw = this.domElement.width;\r\n      var dh = this.domElement.height;\r\n      var sw = Math.pow(2, Math.ceil(Math.log2(dw)));\r\n      var sh = Math.pow(2, Math.ceil(Math.log2(dh)));\r\n\r\n      this.camera = Camera()\r\n        .setPosition(w * 0.5, h * 0.5, 2000)\r\n        .lookAt(w * 0.5, h * 0.5, 0)\r\n        .ortho(-w * 0.5, w * 0.5, h * 0.5, -h * 0.5, 0.1, 3000)\r\n        .calcVpMatrix();\r\n\r\n      this.spriteDrawer = SpriteDrawer(gl, extInstancedArrays);\r\n\r\n      this.framebufferSrc = phigl.Framebuffer(gl, sw, sh);\r\n      this.framebufferDst = phigl.Framebuffer(gl, sw, sh);\r\n      this.framebufferZoomBlur = phigl.Framebuffer(gl, sw, sh);\r\n\r\n      this.postProcessColor = phigl.PostProcessing(gl, \"postprocess_color.fs\", [\"color\"], dw, dh);\r\n      this.postProcessCopy = phigl.PostProcessing(gl, \"postprocess_copy.fs\", null, dw, dh);\r\n      this.postProcessZoomBlur = phigl.PostProcessing(gl, \"postprocess_zoomblur.fs\", [\"center\", \"strength\"], dw, dh);\r\n      this.postProcessReverse = phigl.PostProcessing(gl, \"postprocess_reverse.fs\", null, dw, dh);\r\n      this.postProcessGrayscale = phigl.PostProcessing(gl, \"postprocess_grayscale.fs\", null, dw, dh);\r\n      this.postProcessMosaic = phigl.PostProcessing(gl, \"postprocess_mosaic.fs\", null, dw, dh);\r\n    },\r\n\r\n    draw: function(canvas) {\r\n      var gl = this.gl;\r\n      var image = this.domElement;\r\n\r\n      var cameraUniforms = this.camera.uniformValues();\r\n\r\n      this.framebufferDst.bind();\r\n      gl.clear(gl.COLOR_BUFFER_BIT);\r\n      this.spriteDrawer.render(cameraUniforms);\r\n      this.swap();\r\n\r\n      if (this.zoomBlurAlpha > 0 && this.zoomBlurStrength > 0) {\r\n        this.framebufferZoomBlur.bind();\r\n        gl.clear(gl.COLOR_BUFFER_BIT);\r\n        this.postProcessZoomBlur.render(this.framebufferSrc.texture, {\r\n          center: this.postProcessZoomBlur.calcCoord(this.zoomBlurCenterX, this.zoomBlurCenterY),\r\n          strength: this.zoomBlurStrength,\r\n        });\r\n        this.framebufferDst.bind();\r\n        this.postProcessCopy.render(this.framebufferSrc.texture);\r\n        this.postProcessColor.render(this.framebufferZoomBlur.texture, { color: [1, 1, 1, this.zoomBlurAlpha] });\r\n        this.swap();\r\n      }\r\n\r\n      if (this.reverse) {\r\n        this.framebufferDst.bind();\r\n        this.postProcessReverse.render(this.framebufferSrc.texture);\r\n        this.swap();\r\n      }\r\n\r\n      if (this.grayscale) {\r\n        this.framebufferDst.bind();\r\n        this.postProcessGrayscale.render(this.framebufferSrc.texture);\r\n        this.swap();\r\n      }\r\n\r\n      if (this.water) {\r\n        this.framebufferDst.bind();\r\n        this.postProcessColor.render(this.framebufferSrc.texture, { color: [0.5, 0.5, 2, 1] });\r\n        this.swap();\r\n      }\r\n\r\n      if (this.mosaic) {\r\n        this.framebufferDst.bind();\r\n        this.postProcessMosaic.render(this.framebufferSrc.texture);\r\n        this.swap();\r\n      }\r\n\r\n      phigl.Framebuffer.unbind(gl);\r\n      this.postProcessCopy.render(this.framebufferSrc.texture);\r\n\r\n      gl.flush();\r\n\r\n      canvas.context.drawImage(image,\r\n        0, 0, image.width, image.height,\r\n        0, 0, this.width, this.height\r\n      );\r\n    },\r\n\r\n    swap: function() {\r\n      var temp = this.framebufferSrc;\r\n      this.framebufferSrc = this.framebufferDst;\r\n      this.framebufferDst = temp;\r\n    },\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"GLSprite\", {\r\n    superClass: \"phina.app.Element\",\r\n\r\n    id: -1,\r\n    instanceData: null,\r\n\r\n    init: function(id, instanceData, instanceStride) {\r\n      this.superInit();\r\n      this.id = id;\r\n      this.instanceData = instanceData;\r\n      this.index = id * instanceStride;\r\n    },\r\n\r\n    spawn: function(options) {\r\n      options.$safe({\r\n        visible: true,\r\n        x: 0,\r\n        y: 0,\r\n        rotation: 0,\r\n        scaleX: 1,\r\n        scaleY: 1,\r\n        frameX: 0,\r\n        frameY: 0,\r\n        frameW: 1 / 8,\r\n        frameH: 1 / 8,\r\n        red: 1.0,\r\n        green: 1.0,\r\n        blue: 1.0,\r\n        alpha: 1.0,\r\n      });\r\n\r\n      this.visible = options.visible;\r\n      this.x = options.x;\r\n      this.y = options.y;\r\n      this.rotation = options.rotation;\r\n      this.scaleX = options.scaleX;\r\n      this.scaleY = options.scaleY;\r\n      this.frameX = options.frameX;\r\n      this.frameY = options.frameY;\r\n      this.frameW = options.frameW;\r\n      this.frameH = options.frameH;\r\n      this.red = options.red;\r\n      this.green = options.green;\r\n      this.blue = options.blue;\r\n      this.alpha = options.alpha;\r\n\r\n      return this;\r\n    },\r\n\r\n    onremoved: function() {\r\n      this.visible = false;\r\n    },\r\n\r\n    _accessor: {\r\n      visible: {\r\n        get: function() {\r\n          return this.instanceData[this.index + 0] === 1;\r\n        },\r\n        set: function(v) {\r\n          this.instanceData[this.index + 0] = v ? 1 : 0;\r\n        },\r\n      },\r\n      x: {\r\n        get: function() {\r\n          return this.instanceData[this.index + 1];\r\n        },\r\n        set: function(v) {\r\n          this.instanceData[this.index + 1] = v;\r\n        },\r\n      },\r\n      y: {\r\n        get: function() {\r\n          return this.instanceData[this.index + 2];\r\n        },\r\n        set: function(v) {\r\n          this.instanceData[this.index + 2] = v;\r\n        },\r\n      },\r\n      rotation: {\r\n        get: function() {\r\n          return this.instanceData[this.index + 3];\r\n        },\r\n        set: function(v) {\r\n          this.instanceData[this.index + 3] = v;\r\n        },\r\n      },\r\n      scaleX: {\r\n        get: function() {\r\n          return this.instanceData[this.index + 4];\r\n        },\r\n        set: function(v) {\r\n          this.instanceData[this.index + 4] = v;\r\n        },\r\n      },\r\n      scaleY: {\r\n        get: function() {\r\n          return this.instanceData[this.index + 5];\r\n        },\r\n        set: function(v) {\r\n          this.instanceData[this.index + 5] = v;\r\n        },\r\n      },\r\n      frameX: {\r\n        get: function() {\r\n          return this.instanceData[this.index + 6];\r\n        },\r\n        set: function(v) {\r\n          this.instanceData[this.index + 6] = v;\r\n        },\r\n      },\r\n      frameY: {\r\n        get: function() {\r\n          return this.instanceData[this.index + 7];\r\n        },\r\n        set: function(v) {\r\n          this.instanceData[this.index + 7] = v;\r\n        },\r\n      },\r\n      frameW: {\r\n        get: function() {\r\n          return this.instanceData[this.index + 8];\r\n        },\r\n        set: function(v) {\r\n          this.instanceData[this.index + 8] = v;\r\n        },\r\n      },\r\n      frameH: {\r\n        get: function() {\r\n          return this.instanceData[this.index + 9];\r\n        },\r\n        set: function(v) {\r\n          this.instanceData[this.index + 9] = v;\r\n        },\r\n      },\r\n      red: {\r\n        get: function() {\r\n          return this.instanceData[this.index + 10];\r\n        },\r\n        set: function(v) {\r\n          this.instanceData[this.index + 10] = v;\r\n        },\r\n      },\r\n      green: {\r\n        get: function() {\r\n          return this.instanceData[this.index + 11];\r\n        },\r\n        set: function(v) {\r\n          this.instanceData[this.index + 11] = v;\r\n        },\r\n      },\r\n      blue: {\r\n        get: function() {\r\n          return this.instanceData[this.index + 12];\r\n        },\r\n        set: function(v) {\r\n          this.instanceData[this.index + 12] = v;\r\n        },\r\n      },\r\n      alpha: {\r\n        get: function() {\r\n          return this.instanceData[this.index + 13];\r\n        },\r\n        set: function(v) {\r\n          this.instanceData[this.index + 13] = v;\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n});\r\n","phina.main(function() {\r\n\r\n  var app = GameApp({\r\n    startLabel: \"main\",\r\n    backgroundColor: \"black\",\r\n    assets: {\r\n      image: {\r\n        \"tomapiko\": \"asset/image/tomapiko_ss.png\",\r\n        \"background\": \"asset/image/background.png\",\r\n      },\r\n      vertexShader: {\r\n        \"sprites.vs\": \"asset/glsl/sprites.vs\",\r\n      },\r\n      fragmentShader: {\r\n        \"sprites.fs\": \"asset/glsl/sprites.fs\",\r\n        \"postprocess_color.fs\": \"asset/glsl/postprocess_color.fs\",\r\n        \"postprocess_copy.fs\": \"asset/glsl/postprocess_copy.fs\",\r\n        \"postprocess_zoomblur.fs\": \"asset/glsl/postprocess_zoomblur.fs\",\r\n        \"postprocess_reverse.fs\": \"asset/glsl/postprocess_reverse.fs\",\r\n        \"postprocess_grayscale.fs\": \"asset/glsl/postprocess_grayscale.fs\",\r\n        \"postprocess_mosaic.fs\": \"asset/glsl/postprocess_mosaic.fs\",\r\n      },\r\n    },\r\n    fps: 60,\r\n  });\r\n  \r\n  app.enableStats();\r\n  app.run();\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"MainScene\", {\r\n    superClass: \"DisplayScene\",\r\n\r\n    init: function() {\r\n      this.superInit();\r\n\r\n      var self = this;\r\n      this.fromJSON({\r\n        children: {\r\n          glLayer: {\r\n            className: \"GLLayer\"\r\n          },\r\n          buttons: {\r\n            className: \"DisplayElement\",\r\n            children: {\r\n              zoom: {\r\n                className: \"Button\",\r\n                arguments: {\r\n                  text: \"ズームブラー\",\r\n                },\r\n                x: 320,\r\n                y: 60,\r\n                onclick: function() {\r\n                  self.zoomBlur();\r\n                },\r\n              },\r\n              reverse: {\r\n                className: \"Button\",\r\n                arguments: {\r\n                  text: \"反転\",\r\n                },\r\n                x: 320,\r\n                y: 160,\r\n                onclick: function() {\r\n                  self.reverse();\r\n                },\r\n              },\r\n              water: {\r\n                className: \"Button\",\r\n                arguments: {\r\n                  text: \"青っぽく\",\r\n                },\r\n                x: 320,\r\n                y: 260,\r\n                onclick: function() {\r\n                  self.water();\r\n                },\r\n              },\r\n              grayscale: {\r\n                className: \"Button\",\r\n                arguments: {\r\n                  text: \"グレイスケール\",\r\n                },\r\n                x: 320,\r\n                y: 360,\r\n                onclick: function() {\r\n                  self.grayscale();\r\n                },\r\n              },\r\n              mosaic: {\r\n                className: \"Button\",\r\n                arguments: {\r\n                  text: \"モザイク\",\r\n                },\r\n                x: 320,\r\n                y: 460,\r\n                onclick: function() {\r\n                  self.mosaic();\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      });\r\n\r\n      this.glLayer.spriteDrawer.addObjType(\"background\", {\r\n        texture: phigl.ImageUtil.resizePowOf2(\"background\", true, true),\r\n        count: 1,\r\n      });\r\n      this.glLayer.spriteDrawer.addObjType(\"tomapiko\", {\r\n        texture: phigl.ImageUtil.resizePowOf2(\"tomapiko\", true, true),\r\n        count: 2500,\r\n      });\r\n\r\n      var bg = this.glLayer.spriteDrawer.get(\"background\");\r\n      bg.spawn({\r\n        x: 320,\r\n        y: 480,\r\n        scaleX: 1440,\r\n        scaleY: 960,\r\n        frameW: 1,\r\n        frameH: 1,\r\n      }).addChildTo(this.glLayer);\r\n\r\n      this.count = 0;\r\n    },\r\n\r\n    zoomBlur: function() {\r\n      var self = this;\r\n      self.buttons.hide();\r\n      self.buttons.children.forEach(function(b) { b.interactive = false });\r\n      this.glLayer.tweener\r\n        .clear()\r\n        .set({\r\n          zoomBlurCenterX: Math.randfloat(0, 640),\r\n          zoomBlurCenterY: Math.randfloat(0, 960),\r\n          zoomBlurAlpha: 0.9,\r\n          zoomBlurStrength: 0,\r\n        })\r\n        .to({\r\n          zoomBlurStrength: 5,\r\n        }, 300)\r\n        .to({\r\n          zoomBlurAlpha: 0.0,\r\n        }, 1000)\r\n        .call(function() {\r\n          self.buttons.show();\r\n          self.buttons.children.forEach(function(b) { b.interactive = true });\r\n        });\r\n    },\r\n\r\n    reverse: function() {\r\n      var self = this;\r\n      self.buttons.hide();\r\n      self.buttons.children.forEach(function(b) { b.interactive = false });\r\n      this.glLayer.tweener\r\n        .clear()\r\n        .set({\r\n          reverse: true\r\n        })\r\n        .wait(1000)\r\n        .set({\r\n          reverse: false\r\n        })\r\n        .call(function() {\r\n          self.buttons.show();\r\n          self.buttons.children.forEach(function(b) { b.interactive = true });\r\n        });\r\n    },\r\n\r\n    water: function() {\r\n      var self = this;\r\n      self.buttons.hide();\r\n      self.buttons.children.forEach(function(b) { b.interactive = false });\r\n      this.glLayer.tweener\r\n        .clear()\r\n        .set({\r\n          water: true\r\n        })\r\n        .wait(1000)\r\n        .set({\r\n          water: false\r\n        })\r\n        .call(function() {\r\n          self.buttons.show();\r\n          self.buttons.children.forEach(function(b) { b.interactive = true });\r\n        });\r\n    },\r\n\r\n    grayscale: function() {\r\n      var self = this;\r\n      self.buttons.hide();\r\n      self.buttons.children.forEach(function(b) { b.interactive = false });\r\n      this.glLayer.tweener\r\n        .clear()\r\n        .set({\r\n          grayscale: true\r\n        })\r\n        .wait(1000)\r\n        .set({\r\n          grayscale: false\r\n        })\r\n        .call(function() {\r\n          self.buttons.show();\r\n          self.buttons.children.forEach(function(b) { b.interactive = true });\r\n        });\r\n    },\r\n\r\n    mosaic: function() {\r\n      var self = this;\r\n      self.buttons.hide();\r\n      self.buttons.children.forEach(function(b) { b.interactive = false });\r\n      this.glLayer.tweener\r\n        .clear()\r\n        .set({\r\n          mosaic: true\r\n        })\r\n        .wait(1000)\r\n        .set({\r\n          mosaic: false\r\n        })\r\n        .call(function() {\r\n          self.buttons.show();\r\n          self.buttons.children.forEach(function(b) { b.interactive = true });\r\n        });\r\n    },\r\n\r\n    update: function() {\r\n      (2).times(function() {\r\n        this.spawnTomapiko();\r\n      }.bind(this));\r\n    },\r\n\r\n    spawnTomapiko: function() {\r\n      var sprite = this.glLayer.spriteDrawer.get(\"tomapiko\");\r\n      if (sprite) {\r\n        sprite.age = 0;\r\n\r\n        var scale = Math.randfloat(50, 90);\r\n        sprite\r\n          .spawn({\r\n            x: -100,\r\n            y: Math.random() * 960,\r\n            scaleX: -scale,\r\n            scaleY: scale,\r\n            frameW: 1 / 6,\r\n            frameH: 1 / 3,\r\n          })\r\n          .addChildTo(this.glLayer)\r\n          .clear(\"enterframe\")\r\n          .on(\"enterframe\", function(e) {\r\n            this.x += 2;\r\n            if (740 < this.x) {\r\n              this.remove();\r\n              return;\r\n            }\r\n            var f = (this.age / 5).floor();\r\n            this.frameX = (1 + f % 3) / 6;\r\n            this.age += 1;\r\n          });\r\n      }\r\n    },\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"SpriteDrawer\", {\r\n    superClass: \"phigl.InstancedDrawable\",\r\n\r\n    objTypes: null,\r\n    objParameters: null,\r\n\r\n    init: function(gl, ext) {\r\n      this.superInit(gl, ext);\r\n\r\n      this.objTypes = [];\r\n      this.objParameters = {};\r\n\r\n      var shader = phigl.Program(gl)\r\n        .attach(\"sprites.vs\")\r\n        .attach(\"sprites.fs\")\r\n        .link();\r\n\r\n      this\r\n        .setProgram(shader)\r\n        .setDrawMode(gl.TRIANGLE_STRIP)\r\n        .setIndexValues([0, 1, 2, 3])\r\n        .setAttributes(\"position\", \"uv\")\r\n        .setAttributeDataArray([{\r\n          unitSize: 2,\r\n          data: [\r\n            //\r\n            -0.5, +0.5,\r\n            //\r\n            +0.5, +0.5,\r\n            //\r\n            -0.5, -0.5,\r\n            //\r\n            +0.5, -0.5,\r\n          ]\r\n        }, {\r\n          unitSize: 2,\r\n          data: [\r\n            //\r\n            0, 1,\r\n            //\r\n            1, 1,\r\n            //\r\n            0, 0,\r\n            //\r\n            1, 0,\r\n          ]\r\n        }, ])\r\n        .setInstanceAttributes(\r\n          \"instanceVisible\",\r\n          \"instancePosition\",\r\n          \"instanceRotation\",\r\n          \"instanceScale\",\r\n          \"instanceFrame\",\r\n          \"instanceColor\"\r\n        )\r\n        .setUniforms(\r\n          \"vpMatrix\",\r\n          \"texture\"\r\n        );\r\n\r\n      var instanceStride = this.instanceStride / 4;\r\n    },\r\n\r\n    addObjType: function(objName, options) {\r\n      options = {}.$extend({\r\n        className: \"GLSprite\",\r\n        count: 1,\r\n        texture: null,\r\n        additiveBlending: false,\r\n      }, options);\r\n\r\n      if (!this.objTypes.contains(objName)) {\r\n        var self = this;\r\n        var instanceStride = this.instanceStride / 4;\r\n\r\n        this.objTypes.push(objName);\r\n        var objParameter = this.objParameters[objName] = {\r\n          count: options.count,\r\n          instanceVbo: phigl.Vbo(this.gl, this.gl.DYNAMIC_DRAW),\r\n          texture: phigl.Texture(this.gl, options.texture),\r\n          pool: null,\r\n          additiveBlending: options.additiveBlending,\r\n          instanceData: Array.range(options.count).map(function(i) {\r\n            return [\r\n              // visible\r\n              0,\r\n              // position\r\n              0, 0,\r\n              // rotation\r\n              0,\r\n              // scale\r\n              0, 0,\r\n              // frame\r\n              0, 0, 0, 0,\r\n              // rgba\r\n              0, 0, 0, 0,\r\n            ];\r\n          }).flatten(),\r\n        };\r\n\r\n        var ObjClass = phina.using(options.className);\r\n        objParameter.pool = Array.range(options.count).map(function(id) {\r\n          return ObjClass(id, objParameter.instanceData, instanceStride)\r\n            .on(\"removed\", function() {\r\n              objParameter.pool.push(this);\r\n            });\r\n        });\r\n      }\r\n    },\r\n\r\n    get: function(objName) {\r\n      return this.objParameters[objName].pool.shift();\r\n    },\r\n\r\n    render: function(uniforms) {\r\n      if (this.objTypes.length === 0) return;\r\n\r\n      var gl = this.gl;\r\n\r\n      if (uniforms) {\r\n        uniforms.forIn(function(key, value) {\r\n          if (this.uniforms[key]) this.uniforms[key].value = value;\r\n        }.bind(this));\r\n      }\r\n      var self = this;\r\n      this.objTypes.forEach(function(objName) {\r\n        var objParameter = self.objParameters[objName];\r\n\r\n        if (objParameter.additiveBlending) {\r\n          gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\r\n        } else {\r\n          gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n        }\r\n\r\n        self.setInstanceAttributeVbo(\r\n          objParameter.instanceVbo.set(objParameter.instanceData)\r\n        );\r\n        self.uniforms.texture.setValue(0).setTexture(objParameter.texture);\r\n        self.draw(objParameter.count);\r\n      });\r\n    },\r\n  });\r\n\r\n});\r\n"]}